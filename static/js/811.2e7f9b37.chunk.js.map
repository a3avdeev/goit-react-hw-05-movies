{"version":3,"file":"static/js/811.2e7f9b37.chunk.js","mappings":"iQAEaA,E,OAAaC,GAAAA,GAAH,4U,SCGR,SAASC,IACpB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAQ,mCAAG,2FACbF,EAAS,MACTF,EAAQ,MAFK,mBAKUK,EAAAA,EAAAA,IAAaT,GALvB,OAKHU,EALG,OAOTN,EAAQM,GAPC,gDAUTJ,EAAS,EAAD,IAVC,yDAAH,qDAadE,GACH,GAAE,CAACR,IAEJ,IAAMW,EAA2B,KAAb,OAAJR,QAAI,IAAJA,OAAA,EAAAA,EAAMS,SAAgBP,EAEtC,OACI,UAACR,EAAD,WACKc,IAAW,gFADhB,OAEKR,QAFL,IAEKA,OAFL,EAEKA,EAAMU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,KAAhC,OAA2C,2BAClD,gBAAKC,IAAsB,OAAjBH,EAAwB,kLAAxB,yCAA8OA,GAAgBI,IAAKF,EAAMG,QAAQ,UAC3R,4BACI,wBAAG,uBAAIH,OACP,uCAAeD,UAJwCF,EAApD,MAUtB,C,8LCxCKO,EAAW,gCACXC,EAAU,mCAEHC,EAAa,mCAAG,6GAEFC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oCACkBC,IAHhB,cAEnBG,EAFmB,yBAMlBA,EAASf,KAAKgB,SANI,gCAQzBC,QAAQC,IAAI,KAAMC,SAClBC,MAAM,UAAD,OAAW,KAAMD,QAAjB,+BAToB,yDAAH,qDAabE,EAAW,mCAAG,WAAOC,GAAP,gGAEAR,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC+BU,IAH/B,cAEjBP,EAFiB,yBAMhBA,EAASf,KAAKgB,SANE,gCAQvBC,QAAQC,IAAI,KAAMC,SAClBC,MAAM,UAAD,OAAW,KAAMD,QAAjB,+BATkB,yDAAH,sDAaXI,EAAY,mCAAG,WAAOnB,GAAP,gGAEDU,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDP,EADC,oBACaQ,IAHZ,cAElBG,EAFkB,yBAMjBA,EAASf,MANQ,gCAQxBiB,QAAQC,IAAR,MACAE,MAAM,UAAD,OAAW,KAAML,SAASf,KAAKwB,eAA/B,wCACLC,OAAOC,SAASC,QAAQ,KAVA,yDAAH,sDAcZ5B,EAAY,mCAAG,WAAOK,GAAP,gGAEDU,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDP,EADC,4BACqBQ,IAHpB,cAElBG,EAFkB,yBAMjBA,EAASf,KAAKP,MANG,gCAQxBwB,QAAQC,IAAI,KAAMC,SAClBC,MAAM,UAAD,OAAW,KAAMD,QAAjB,gCATmB,yDAAH,sDAaZS,EAAY,mCAAG,WAAOxB,GAAP,gGAEDU,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDP,EADC,4BACqBQ,IAHpB,cAElBG,EAFkB,yBAMjBA,EAASf,KAAKgB,SANG,gCAQxBC,QAAQC,IAAI,KAAMC,SAClBC,MAAM,UAAD,OAAW,KAAMD,QAAjB,gCATmB,yDAAH,qD","sources":["components/Cast/Cast.Styled.js","components/Cast/Cast.jsx","services/fetchFilms.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorCards = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -10px;\n  margin-top: -10px;\n\n  & li {\n    max-width: 200px;\n    min-height: 300px;\n    margin-left: 32px;\n    margin-top: 32px;\n    object-fit: cover;\n\n    & img {\n      max-width: 200px;\n      height: 300px;\n    }\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCredits } from '../../services/fetchFilms';\nimport { ActorCards } from './Cast.Styled';\n\nexport default function Cast() {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const getMovie = async () => {\n            setError(null)\n            setCast(null)\n\n            try {\n                const data = await fetchCredits(movieId)\n\n                setCast(data)\n\n            } catch (error) {\n                setError(error)\n            }\n        }\n        getMovie();\n    }, [movieId]);\n\n    const isMovie = cast?.length === 0 || error;\n\n    return (\n        <ActorCards>\n            {isMovie && <p>We don't have any actors information for this moment</p>}\n            {cast?.map(({ id, profile_path, character, name }) => <li key={id}>\n                <img src={profile_path === null ? 'https://us.123rf.com/450wm/urfandadashov/urfandadashov1805/urfandadashov180500070/100957966-photo-not-available-icon-isolated-on-white-background-vector-illustration.jpg?ver=6' : `https://image.tmdb.org/t/p/w200${profile_path}`} alt={name} loading=\"lazy\" />\n                <div>\n                    <p><b>{name}</b></p>\n                    <p>Character: {character}</p>\n                </div>\n            </li>\n            )}\n        </ActorCards>\n    );\n}\n","import axios from \"axios\";\n\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"9827f40b343f4f4b022b63e7687192bf\";\n\nexport const fetchTrending = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}trending/all/day?api_key=${API_KEY}`\n    );\n    // console.log(response.data);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n    alert(`Sorry. ${error.message}. Please try another movie`);\n  }\n};\n\nexport const fetchSearch = async (query) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    // console.log(response.data);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n    alert(`Sorry. ${error.message}. Please try another movie`);\n  }\n};\n\nexport const fetchDetails = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}?api_key=${API_KEY}`\n    );\n    // console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    alert(`Sorry. ${error.response.data.status_message} Please try to search another movie`);\n    window.location.replace(\"/\")\n  }\n};\n\nexport const fetchCredits = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}`\n    );\n    // console.log(response.data);\n    return response.data.cast;\n  } catch (error) {\n    console.log(error.message);\n    alert(`Sorry. ${error.message}. Please try something else`);\n  }\n};\n\nexport const fetchReviews = async (id) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}`\n    );\n    // console.log(response.data);\n    return response.data.results;\n  } catch (error) {\n    console.log(error.message);\n    alert(`Sorry. ${error.message}. Please try something else`);\n  }\n};\n"],"names":["ActorCards","styled","Cast","movieId","useParams","useState","cast","setCast","error","setError","useEffect","getMovie","fetchCredits","data","isMovie","length","map","id","profile_path","character","name","src","alt","loading","BASE_URL","API_KEY","fetchTrending","axios","response","results","console","log","message","alert","fetchSearch","query","fetchDetails","status_message","window","location","replace","fetchReviews"],"sourceRoot":""}